import os
import numpy as np
import tensorflow as tf

flags = tf.app.flags
FLAGS = flags.FLAGS

flags.DEFINE_string('train_dir', 'data', 'Directory to put the training data.')
flags.DEFINE_string('dataset', 'dataset.csv', 'Dataset trained by LSTM model.')
flags.DEFINE_integer('num_hidden', 20, 'Number of hidden layer of LSTM Cell.')
flags.DEFINE_integer('seq_len', 100, 'Max sequence length.')


def get_data(train_dir=FLAGS.train_dir,
             dataset=FLAGS.dataset,
             seq_len=FLAGS.seq_len):
    path = os.path.join(train_dir, dataset)
    with open(path) as csv:
        data = csv.read()
        table = map(lambda x: x.split(','), data.split('\n'))

    table = map(lambda x: map(int, x), table[:-1])
    if seq_len == -1:
        seq_len = max(map(lambda x: len(x) - 1, table))

    padd = lambda x: [[0]] * (seq_len - len(x) + 1)
    toarr = lambda x: np.array(map(lambda _x: [_x], x[1:]) + padd(x))

    train_y = map(lambda x: [x[0], x[0] ^ 1], table)
    train_x = map(toarr, table)

    return train_x, train_y, seq_len


class VirusModel(object):
    def __init__(self, seq_len=FLAGS.seq_len, num_hidden=FLAGS.num_hidden):
        X = tf.placeholder(tf.float32, [None, seq_len, 1])
        Y = tf.placeholder(tf.float32, [None, 2])

        cell = tf.nn.rnn_cell.LSTMCell(num_hidden)
        out, state = tf.nn.dynamic_rnn(cell, X, dtype=tf.float32)

        out = tf.transpose(out, [1, 0, 2])
        last = tf.gather(out, seq_len - 1)

        weight = tf.Variable(tf.truncated_normal([num_hidden, 2]))
        bias = tf.Variable(tf.constant(0.1, shape=[2]))

        pred = tf.nn.softmax(tf.matmul(last, weight) + bias)
        cross_entropy = -tf.reduce_sum(Y * tf.log(pred))

        opt = tf.train.RMSPropOptimizer(0.001, 0.9).minimize(cross_entropy)

        mistakes = tf.not_equal(tf.argmax(Y, 1), tf.argmax(pred, 1))
        err = tf.reduce_mean(tf.cast(mistakes, tf.float32))

        self.X, self.Y = X, Y
        self.pred = pred
        self.err, self.opt = err, opt
