from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Malware(Base):
    __tablename__ = 'malware'
    id = Column(Integer, primary_key = True)
    name = Column(String, nullable = False)

    branches = relationship('Branch', backref = 'malware')

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return "<Malware(id=%s, name='%s')>" % (self.id, self.name)

class Branch(Base):
    __tablename__ = 'branch'
    id = Column(Integer, primary_key = True)
    order = Column(Integer, nullable = False)

    src_addr = Column(Integer, nullable = False)
    dst_addr = Column(Integer, nullable = False)

    dll = Column(String)
    symbol = Column(String)

    malware_id = Column(Integer, ForeignKey('malware.id'), nullable = False)

    def __init__(self, mal, order, src_addr, dst_addr, dll, symbol):
        self.malware_id = mal
        self.order = order

        self.src_addr = src_addr
        self.dst_addr = dst_addr

        self.dll = dll
        self.symbol = symbol

    def __repr__(self):
        return "<Branch(id=%s, malware_id=%s, src=%s, dst=%s, dll='%s', name='%s')" \
            % (self.id, self.malware_id, self.src_addr, self.dst_addr, self.dll, self.symbol)
